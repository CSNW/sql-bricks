(function() {

var is_common_js = typeof exports != 'undefined';
var _ = is_common_js ? require('underscore') : window._;
var sql = is_common_js ? require('../sql-bricks.js') : window.SqlBricks;

if (is_common_js) {
  var args = process.argv;
  if (args[args.length - 1] == '--empty-extension') {
    console.log('doctests configured with an empty extension');
    sql = sql._extension();
  }
}

var assert;
if (is_common_js) {
  assert = require('assert');
}
else {
  assert = {
    'equal': function(actual, expected) {
      if (actual != expected) throw new Error(JSON.stringify(actual) + ' == ' + JSON.stringify(expected));
    },
    'deepEqual': function(actual, expected) {
      if (!_.isEqual(actual, expected)) throw new Error(JSON.stringify(actual) + ' == ' + JSON.stringify(expected));
    }
  };
}

var select = sql.select, insertInto = sql.insertInto, insert = sql.insert,
  update = sql.update, del = sql.delete, replace = sql.replace;
var and = sql.and, or = sql.or, like = sql.like, not = sql.not, $in = sql.in,
  isNull = sql.isNull, isNotNull = sql.isNotNull, equal = sql.equal,
  lt = sql.lt, lte = sql.lte, gt = sql.gt, gte = sql.gte, between = sql.between,
  exists = sql.exists, eqAny = sql.eqAny;

describe('SQL Bricks', function() {
  describe('documentation examples', function() {


{{tests}}


  });
});

function check(actual, expected) {
  if (_.isObject(actual) && _.isString(expected))
    assert.equal(actual.toString(), expected);
  else
    assert.deepEqual(actual, expected);
}

})();
